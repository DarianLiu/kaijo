package dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.geek.kaijo.mvp.model.entity.CaseInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CASE_INFO".
*/
public class CaseInfoDao extends AbstractDao<CaseInfo, Long> {

    public static final String TABLENAME = "CASE_INFO";

    /**
     * Properties of entity CaseInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property CurrPage = new Property(1, int.class, "currPage", false, "CURR_PAGE");
        public final static Property PageSize = new Property(2, int.class, "pageSize", false, "PAGE_SIZE");
        public final static Property CaseId = new Property(3, String.class, "caseId", false, "CASE_ID");
        public final static Property CreateTime = new Property(4, long.class, "createTime", false, "CREATE_TIME");
        public final static Property CreateUser = new Property(5, String.class, "createUser", false, "CREATE_USER");
        public final static Property ModifyTime = new Property(6, long.class, "modifyTime", false, "MODIFY_TIME");
        public final static Property ModifyUser = new Property(7, String.class, "modifyUser", false, "MODIFY_USER");
        public final static Property AcceptDate = new Property(8, String.class, "acceptDate", false, "ACCEPT_DATE");
        public final static Property Address = new Property(9, String.class, "address", false, "ADDRESS");
        public final static Property StreetId = new Property(10, String.class, "streetId", false, "STREET_ID");
        public final static Property CaseChildCategory = new Property(11, String.class, "caseChildCategory", false, "CASE_CHILD_CATEGORY");
        public final static Property CaseNumber = new Property(12, String.class, "caseNumber", false, "CASE_NUMBER");
        public final static Property CasePrimaryCategory = new Property(13, String.class, "casePrimaryCategory", false, "CASE_PRIMARY_CATEGORY");
        public final static Property CaseSecondaryCategory = new Property(14, String.class, "caseSecondaryCategory", false, "CASE_SECONDARY_CATEGORY");
        public final static Property CaseAttribute = new Property(15, String.class, "caseAttribute", false, "CASE_ATTRIBUTE");
        public final static Property CloseCaseDisposalEntity = new Property(16, String.class, "closeCaseDisposalEntity", false, "CLOSE_CASE_DISPOSAL_ENTITY");
        public final static Property Description = new Property(17, String.class, "description", false, "DESCRIPTION");
        public final static Property DispatchUserId = new Property(18, String.class, "dispatchUserId", false, "DISPATCH_USER_ID");
        public final static Property Element = new Property(19, String.class, "element", false, "ELEMENT");
        public final static Property EmergencyDegree = new Property(20, String.class, "emergencyDegree", false, "EMERGENCY_DEGREE");
        public final static Property EndNode = new Property(21, String.class, "endNode", false, "END_NODE");
        public final static Property Grade = new Property(22, String.class, "grade", false, "GRADE");
        public final static Property KnottyType = new Property(23, String.class, "knottyType", false, "KNOTTY_TYPE");
        public final static Property Lat = new Property(24, String.class, "lat", false, "LAT");
        public final static Property LightType = new Property(25, String.class, "lightType", false, "LIGHT_TYPE");
        public final static Property Lng = new Property(26, String.class, "lng", false, "LNG");
        public final static Property GridId = new Property(27, String.class, "gridId", false, "GRID_ID");
        public final static Property ManagePoint = new Property(28, String.class, "managePoint", false, "MANAGE_POINT");
        public final static Property PersonName = new Property(29, String.class, "personName", false, "PERSON_NAME");
        public final static Property PersonTel = new Property(30, String.class, "personTel", false, "PERSON_TEL");
        public final static Property RedLightStart = new Property(31, String.class, "redLightStart", false, "RED_LIGHT_START");
        public final static Property CommunityId = new Property(32, String.class, "communityId", false, "COMMUNITY_ID");
        public final static Property Source = new Property(33, String.class, "source", false, "SOURCE");
        public final static Property Status = new Property(34, String.class, "status", false, "STATUS");
        public final static Property SubWorkflowDisposalEntity = new Property(35, String.class, "subWorkflowDisposalEntity", false, "SUB_WORKFLOW_DISPOSAL_ENTITY");
        public final static Property TaskId = new Property(36, String.class, "taskId", false, "TASK_ID");
        public final static Property UrgeFlag = new Property(37, String.class, "urgeFlag", false, "URGE_FLAG");
        public final static Property WidgetNumber = new Property(38, String.class, "widgetNumber", false, "WIDGET_NUMBER");
        public final static Property WorkflowId = new Property(39, String.class, "workflowId", false, "WORKFLOW_ID");
        public final static Property YellowLightStart = new Property(40, String.class, "yellowLightStart", false, "YELLOW_LIGHT_START");
        public final static Property DelFlag = new Property(41, String.class, "delFlag", false, "DEL_FLAG");
        public final static Property StartDate = new Property(42, String.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(43, String.class, "endDate", false, "END_DATE");
        public final static Property HandleResult = new Property(44, String.class, "handleResult", false, "HANDLE_RESULT");
        public final static Property HandleResultDescription = new Property(45, String.class, "handleResultDescription", false, "HANDLE_RESULT_DESCRIPTION");
        public final static Property HanderId = new Property(46, String.class, "handerId", false, "HANDER_ID");
        public final static Property CaseCode = new Property(47, String.class, "caseCode", false, "CASE_CODE");
        public final static Property CurNode = new Property(48, int.class, "curNode", false, "CUR_NODE");
        public final static Property CaseStatus = new Property(49, String.class, "caseStatus", false, "CASE_STATUS");
        public final static Property State = new Property(50, String.class, "state", false, "STATE");
        public final static Property HandleType = new Property(51, int.class, "handleType", false, "HANDLE_TYPE");
        public final static Property UserId = new Property(52, String.class, "userId", false, "USER_ID");
        public final static Property ProcessId = new Property(53, int.class, "processId", false, "PROCESS_ID");
        public final static Property CaseListStatus = new Property(54, String.class, "caseListStatus", false, "CASE_LIST_STATUS");
        public final static Property CaseType = new Property(55, int.class, "caseType", false, "CASE_TYPE");
        public final static Property RoleId = new Property(56, String.class, "roleId", false, "ROLE_ID");
        public final static Property District = new Property(57, String.class, "district", false, "DISTRICT");
        public final static Property FirstWorkunit = new Property(58, String.class, "firstWorkunit", false, "FIRST_WORKUNIT");
        public final static Property SecondWorkunit = new Property(59, String.class, "secondWorkunit", false, "SECOND_WORKUNIT");
        public final static Property CityWorkunit = new Property(60, String.class, "cityWorkunit", false, "CITY_WORKUNIT");
        public final static Property RedLightStartTime = new Property(61, String.class, "redLightStartTime", false, "RED_LIGHT_START_TIME");
        public final static Property YellowLightStartTime = new Property(62, String.class, "yellowLightStartTime", false, "YELLOW_LIGHT_START_TIME");
        public final static Property QueryFlag = new Property(63, String.class, "queryFlag", false, "QUERY_FLAG");
        public final static Property FileListGson = new Property(64, String.class, "fileListGson", false, "FILE_LIST_GSON");
    }


    public CaseInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CaseInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CASE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"CURR_PAGE\" INTEGER NOT NULL ," + // 1: currPage
                "\"PAGE_SIZE\" INTEGER NOT NULL ," + // 2: pageSize
                "\"CASE_ID\" TEXT," + // 3: caseId
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 4: createTime
                "\"CREATE_USER\" TEXT," + // 5: createUser
                "\"MODIFY_TIME\" INTEGER NOT NULL ," + // 6: modifyTime
                "\"MODIFY_USER\" TEXT," + // 7: modifyUser
                "\"ACCEPT_DATE\" TEXT," + // 8: acceptDate
                "\"ADDRESS\" TEXT," + // 9: address
                "\"STREET_ID\" TEXT," + // 10: streetId
                "\"CASE_CHILD_CATEGORY\" TEXT," + // 11: caseChildCategory
                "\"CASE_NUMBER\" TEXT," + // 12: caseNumber
                "\"CASE_PRIMARY_CATEGORY\" TEXT," + // 13: casePrimaryCategory
                "\"CASE_SECONDARY_CATEGORY\" TEXT," + // 14: caseSecondaryCategory
                "\"CASE_ATTRIBUTE\" TEXT," + // 15: caseAttribute
                "\"CLOSE_CASE_DISPOSAL_ENTITY\" TEXT," + // 16: closeCaseDisposalEntity
                "\"DESCRIPTION\" TEXT," + // 17: description
                "\"DISPATCH_USER_ID\" TEXT," + // 18: dispatchUserId
                "\"ELEMENT\" TEXT," + // 19: element
                "\"EMERGENCY_DEGREE\" TEXT," + // 20: emergencyDegree
                "\"END_NODE\" TEXT," + // 21: endNode
                "\"GRADE\" TEXT," + // 22: grade
                "\"KNOTTY_TYPE\" TEXT," + // 23: knottyType
                "\"LAT\" TEXT," + // 24: lat
                "\"LIGHT_TYPE\" TEXT," + // 25: lightType
                "\"LNG\" TEXT," + // 26: lng
                "\"GRID_ID\" TEXT," + // 27: gridId
                "\"MANAGE_POINT\" TEXT," + // 28: managePoint
                "\"PERSON_NAME\" TEXT," + // 29: personName
                "\"PERSON_TEL\" TEXT," + // 30: personTel
                "\"RED_LIGHT_START\" TEXT," + // 31: redLightStart
                "\"COMMUNITY_ID\" TEXT," + // 32: communityId
                "\"SOURCE\" TEXT," + // 33: source
                "\"STATUS\" TEXT," + // 34: status
                "\"SUB_WORKFLOW_DISPOSAL_ENTITY\" TEXT," + // 35: subWorkflowDisposalEntity
                "\"TASK_ID\" TEXT," + // 36: taskId
                "\"URGE_FLAG\" TEXT," + // 37: urgeFlag
                "\"WIDGET_NUMBER\" TEXT," + // 38: widgetNumber
                "\"WORKFLOW_ID\" TEXT," + // 39: workflowId
                "\"YELLOW_LIGHT_START\" TEXT," + // 40: yellowLightStart
                "\"DEL_FLAG\" TEXT," + // 41: delFlag
                "\"START_DATE\" TEXT," + // 42: startDate
                "\"END_DATE\" TEXT," + // 43: endDate
                "\"HANDLE_RESULT\" TEXT," + // 44: handleResult
                "\"HANDLE_RESULT_DESCRIPTION\" TEXT," + // 45: handleResultDescription
                "\"HANDER_ID\" TEXT," + // 46: handerId
                "\"CASE_CODE\" TEXT," + // 47: caseCode
                "\"CUR_NODE\" INTEGER NOT NULL ," + // 48: curNode
                "\"CASE_STATUS\" TEXT," + // 49: caseStatus
                "\"STATE\" TEXT," + // 50: state
                "\"HANDLE_TYPE\" INTEGER NOT NULL ," + // 51: handleType
                "\"USER_ID\" TEXT," + // 52: userId
                "\"PROCESS_ID\" INTEGER NOT NULL ," + // 53: processId
                "\"CASE_LIST_STATUS\" TEXT," + // 54: caseListStatus
                "\"CASE_TYPE\" INTEGER NOT NULL ," + // 55: caseType
                "\"ROLE_ID\" TEXT," + // 56: roleId
                "\"DISTRICT\" TEXT," + // 57: district
                "\"FIRST_WORKUNIT\" TEXT," + // 58: firstWorkunit
                "\"SECOND_WORKUNIT\" TEXT," + // 59: secondWorkunit
                "\"CITY_WORKUNIT\" TEXT," + // 60: cityWorkunit
                "\"RED_LIGHT_START_TIME\" TEXT," + // 61: redLightStartTime
                "\"YELLOW_LIGHT_START_TIME\" TEXT," + // 62: yellowLightStartTime
                "\"QUERY_FLAG\" TEXT," + // 63: queryFlag
                "\"FILE_LIST_GSON\" TEXT);"); // 64: fileListGson
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CASE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CaseInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getCurrPage());
        stmt.bindLong(3, entity.getPageSize());
 
        String caseId = entity.getCaseId();
        if (caseId != null) {
            stmt.bindString(4, caseId);
        }
        stmt.bindLong(5, entity.getCreateTime());
 
        String createUser = entity.getCreateUser();
        if (createUser != null) {
            stmt.bindString(6, createUser);
        }
        stmt.bindLong(7, entity.getModifyTime());
 
        String modifyUser = entity.getModifyUser();
        if (modifyUser != null) {
            stmt.bindString(8, modifyUser);
        }
 
        String acceptDate = entity.getAcceptDate();
        if (acceptDate != null) {
            stmt.bindString(9, acceptDate);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
 
        String streetId = entity.getStreetId();
        if (streetId != null) {
            stmt.bindString(11, streetId);
        }
 
        String caseChildCategory = entity.getCaseChildCategory();
        if (caseChildCategory != null) {
            stmt.bindString(12, caseChildCategory);
        }
 
        String caseNumber = entity.getCaseNumber();
        if (caseNumber != null) {
            stmt.bindString(13, caseNumber);
        }
 
        String casePrimaryCategory = entity.getCasePrimaryCategory();
        if (casePrimaryCategory != null) {
            stmt.bindString(14, casePrimaryCategory);
        }
 
        String caseSecondaryCategory = entity.getCaseSecondaryCategory();
        if (caseSecondaryCategory != null) {
            stmt.bindString(15, caseSecondaryCategory);
        }
 
        String caseAttribute = entity.getCaseAttribute();
        if (caseAttribute != null) {
            stmt.bindString(16, caseAttribute);
        }
 
        String closeCaseDisposalEntity = entity.getCloseCaseDisposalEntity();
        if (closeCaseDisposalEntity != null) {
            stmt.bindString(17, closeCaseDisposalEntity);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(18, description);
        }
 
        String dispatchUserId = entity.getDispatchUserId();
        if (dispatchUserId != null) {
            stmt.bindString(19, dispatchUserId);
        }
 
        String element = entity.getElement();
        if (element != null) {
            stmt.bindString(20, element);
        }
 
        String emergencyDegree = entity.getEmergencyDegree();
        if (emergencyDegree != null) {
            stmt.bindString(21, emergencyDegree);
        }
 
        String endNode = entity.getEndNode();
        if (endNode != null) {
            stmt.bindString(22, endNode);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(23, grade);
        }
 
        String knottyType = entity.getKnottyType();
        if (knottyType != null) {
            stmt.bindString(24, knottyType);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(25, lat);
        }
 
        String lightType = entity.getLightType();
        if (lightType != null) {
            stmt.bindString(26, lightType);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(27, lng);
        }
 
        String gridId = entity.getGridId();
        if (gridId != null) {
            stmt.bindString(28, gridId);
        }
 
        String managePoint = entity.getManagePoint();
        if (managePoint != null) {
            stmt.bindString(29, managePoint);
        }
 
        String personName = entity.getPersonName();
        if (personName != null) {
            stmt.bindString(30, personName);
        }
 
        String personTel = entity.getPersonTel();
        if (personTel != null) {
            stmt.bindString(31, personTel);
        }
 
        String redLightStart = entity.getRedLightStart();
        if (redLightStart != null) {
            stmt.bindString(32, redLightStart);
        }
 
        String communityId = entity.getCommunityId();
        if (communityId != null) {
            stmt.bindString(33, communityId);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(34, source);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(35, status);
        }
 
        String subWorkflowDisposalEntity = entity.getSubWorkflowDisposalEntity();
        if (subWorkflowDisposalEntity != null) {
            stmt.bindString(36, subWorkflowDisposalEntity);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(37, taskId);
        }
 
        String urgeFlag = entity.getUrgeFlag();
        if (urgeFlag != null) {
            stmt.bindString(38, urgeFlag);
        }
 
        String widgetNumber = entity.getWidgetNumber();
        if (widgetNumber != null) {
            stmt.bindString(39, widgetNumber);
        }
 
        String workflowId = entity.getWorkflowId();
        if (workflowId != null) {
            stmt.bindString(40, workflowId);
        }
 
        String yellowLightStart = entity.getYellowLightStart();
        if (yellowLightStart != null) {
            stmt.bindString(41, yellowLightStart);
        }
 
        String delFlag = entity.getDelFlag();
        if (delFlag != null) {
            stmt.bindString(42, delFlag);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(43, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(44, endDate);
        }
 
        String handleResult = entity.getHandleResult();
        if (handleResult != null) {
            stmt.bindString(45, handleResult);
        }
 
        String handleResultDescription = entity.getHandleResultDescription();
        if (handleResultDescription != null) {
            stmt.bindString(46, handleResultDescription);
        }
 
        String handerId = entity.getHanderId();
        if (handerId != null) {
            stmt.bindString(47, handerId);
        }
 
        String caseCode = entity.getCaseCode();
        if (caseCode != null) {
            stmt.bindString(48, caseCode);
        }
        stmt.bindLong(49, entity.getCurNode());
 
        String caseStatus = entity.getCaseStatus();
        if (caseStatus != null) {
            stmt.bindString(50, caseStatus);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(51, state);
        }
        stmt.bindLong(52, entity.getHandleType());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(53, userId);
        }
        stmt.bindLong(54, entity.getProcessId());
 
        String caseListStatus = entity.getCaseListStatus();
        if (caseListStatus != null) {
            stmt.bindString(55, caseListStatus);
        }
        stmt.bindLong(56, entity.getCaseType());
 
        String roleId = entity.getRoleId();
        if (roleId != null) {
            stmt.bindString(57, roleId);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(58, district);
        }
 
        String firstWorkunit = entity.getFirstWorkunit();
        if (firstWorkunit != null) {
            stmt.bindString(59, firstWorkunit);
        }
 
        String secondWorkunit = entity.getSecondWorkunit();
        if (secondWorkunit != null) {
            stmt.bindString(60, secondWorkunit);
        }
 
        String cityWorkunit = entity.getCityWorkunit();
        if (cityWorkunit != null) {
            stmt.bindString(61, cityWorkunit);
        }
 
        String redLightStartTime = entity.getRedLightStartTime();
        if (redLightStartTime != null) {
            stmt.bindString(62, redLightStartTime);
        }
 
        String yellowLightStartTime = entity.getYellowLightStartTime();
        if (yellowLightStartTime != null) {
            stmt.bindString(63, yellowLightStartTime);
        }
 
        String queryFlag = entity.getQueryFlag();
        if (queryFlag != null) {
            stmt.bindString(64, queryFlag);
        }
 
        String fileListGson = entity.getFileListGson();
        if (fileListGson != null) {
            stmt.bindString(65, fileListGson);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CaseInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getCurrPage());
        stmt.bindLong(3, entity.getPageSize());
 
        String caseId = entity.getCaseId();
        if (caseId != null) {
            stmt.bindString(4, caseId);
        }
        stmt.bindLong(5, entity.getCreateTime());
 
        String createUser = entity.getCreateUser();
        if (createUser != null) {
            stmt.bindString(6, createUser);
        }
        stmt.bindLong(7, entity.getModifyTime());
 
        String modifyUser = entity.getModifyUser();
        if (modifyUser != null) {
            stmt.bindString(8, modifyUser);
        }
 
        String acceptDate = entity.getAcceptDate();
        if (acceptDate != null) {
            stmt.bindString(9, acceptDate);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
 
        String streetId = entity.getStreetId();
        if (streetId != null) {
            stmt.bindString(11, streetId);
        }
 
        String caseChildCategory = entity.getCaseChildCategory();
        if (caseChildCategory != null) {
            stmt.bindString(12, caseChildCategory);
        }
 
        String caseNumber = entity.getCaseNumber();
        if (caseNumber != null) {
            stmt.bindString(13, caseNumber);
        }
 
        String casePrimaryCategory = entity.getCasePrimaryCategory();
        if (casePrimaryCategory != null) {
            stmt.bindString(14, casePrimaryCategory);
        }
 
        String caseSecondaryCategory = entity.getCaseSecondaryCategory();
        if (caseSecondaryCategory != null) {
            stmt.bindString(15, caseSecondaryCategory);
        }
 
        String caseAttribute = entity.getCaseAttribute();
        if (caseAttribute != null) {
            stmt.bindString(16, caseAttribute);
        }
 
        String closeCaseDisposalEntity = entity.getCloseCaseDisposalEntity();
        if (closeCaseDisposalEntity != null) {
            stmt.bindString(17, closeCaseDisposalEntity);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(18, description);
        }
 
        String dispatchUserId = entity.getDispatchUserId();
        if (dispatchUserId != null) {
            stmt.bindString(19, dispatchUserId);
        }
 
        String element = entity.getElement();
        if (element != null) {
            stmt.bindString(20, element);
        }
 
        String emergencyDegree = entity.getEmergencyDegree();
        if (emergencyDegree != null) {
            stmt.bindString(21, emergencyDegree);
        }
 
        String endNode = entity.getEndNode();
        if (endNode != null) {
            stmt.bindString(22, endNode);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(23, grade);
        }
 
        String knottyType = entity.getKnottyType();
        if (knottyType != null) {
            stmt.bindString(24, knottyType);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(25, lat);
        }
 
        String lightType = entity.getLightType();
        if (lightType != null) {
            stmt.bindString(26, lightType);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(27, lng);
        }
 
        String gridId = entity.getGridId();
        if (gridId != null) {
            stmt.bindString(28, gridId);
        }
 
        String managePoint = entity.getManagePoint();
        if (managePoint != null) {
            stmt.bindString(29, managePoint);
        }
 
        String personName = entity.getPersonName();
        if (personName != null) {
            stmt.bindString(30, personName);
        }
 
        String personTel = entity.getPersonTel();
        if (personTel != null) {
            stmt.bindString(31, personTel);
        }
 
        String redLightStart = entity.getRedLightStart();
        if (redLightStart != null) {
            stmt.bindString(32, redLightStart);
        }
 
        String communityId = entity.getCommunityId();
        if (communityId != null) {
            stmt.bindString(33, communityId);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(34, source);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(35, status);
        }
 
        String subWorkflowDisposalEntity = entity.getSubWorkflowDisposalEntity();
        if (subWorkflowDisposalEntity != null) {
            stmt.bindString(36, subWorkflowDisposalEntity);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(37, taskId);
        }
 
        String urgeFlag = entity.getUrgeFlag();
        if (urgeFlag != null) {
            stmt.bindString(38, urgeFlag);
        }
 
        String widgetNumber = entity.getWidgetNumber();
        if (widgetNumber != null) {
            stmt.bindString(39, widgetNumber);
        }
 
        String workflowId = entity.getWorkflowId();
        if (workflowId != null) {
            stmt.bindString(40, workflowId);
        }
 
        String yellowLightStart = entity.getYellowLightStart();
        if (yellowLightStart != null) {
            stmt.bindString(41, yellowLightStart);
        }
 
        String delFlag = entity.getDelFlag();
        if (delFlag != null) {
            stmt.bindString(42, delFlag);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(43, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(44, endDate);
        }
 
        String handleResult = entity.getHandleResult();
        if (handleResult != null) {
            stmt.bindString(45, handleResult);
        }
 
        String handleResultDescription = entity.getHandleResultDescription();
        if (handleResultDescription != null) {
            stmt.bindString(46, handleResultDescription);
        }
 
        String handerId = entity.getHanderId();
        if (handerId != null) {
            stmt.bindString(47, handerId);
        }
 
        String caseCode = entity.getCaseCode();
        if (caseCode != null) {
            stmt.bindString(48, caseCode);
        }
        stmt.bindLong(49, entity.getCurNode());
 
        String caseStatus = entity.getCaseStatus();
        if (caseStatus != null) {
            stmt.bindString(50, caseStatus);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(51, state);
        }
        stmt.bindLong(52, entity.getHandleType());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(53, userId);
        }
        stmt.bindLong(54, entity.getProcessId());
 
        String caseListStatus = entity.getCaseListStatus();
        if (caseListStatus != null) {
            stmt.bindString(55, caseListStatus);
        }
        stmt.bindLong(56, entity.getCaseType());
 
        String roleId = entity.getRoleId();
        if (roleId != null) {
            stmt.bindString(57, roleId);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(58, district);
        }
 
        String firstWorkunit = entity.getFirstWorkunit();
        if (firstWorkunit != null) {
            stmt.bindString(59, firstWorkunit);
        }
 
        String secondWorkunit = entity.getSecondWorkunit();
        if (secondWorkunit != null) {
            stmt.bindString(60, secondWorkunit);
        }
 
        String cityWorkunit = entity.getCityWorkunit();
        if (cityWorkunit != null) {
            stmt.bindString(61, cityWorkunit);
        }
 
        String redLightStartTime = entity.getRedLightStartTime();
        if (redLightStartTime != null) {
            stmt.bindString(62, redLightStartTime);
        }
 
        String yellowLightStartTime = entity.getYellowLightStartTime();
        if (yellowLightStartTime != null) {
            stmt.bindString(63, yellowLightStartTime);
        }
 
        String queryFlag = entity.getQueryFlag();
        if (queryFlag != null) {
            stmt.bindString(64, queryFlag);
        }
 
        String fileListGson = entity.getFileListGson();
        if (fileListGson != null) {
            stmt.bindString(65, fileListGson);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CaseInfo readEntity(Cursor cursor, int offset) {
        CaseInfo entity = new CaseInfo( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // currPage
            cursor.getInt(offset + 2), // pageSize
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // caseId
            cursor.getLong(offset + 4), // createTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createUser
            cursor.getLong(offset + 6), // modifyTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // modifyUser
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // acceptDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // address
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // streetId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // caseChildCategory
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // caseNumber
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // casePrimaryCategory
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // caseSecondaryCategory
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // caseAttribute
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // closeCaseDisposalEntity
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // description
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // dispatchUserId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // element
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // emergencyDegree
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // endNode
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // grade
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // knottyType
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // lat
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // lightType
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // lng
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // gridId
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // managePoint
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // personName
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // personTel
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // redLightStart
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // communityId
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // source
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // status
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // subWorkflowDisposalEntity
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // taskId
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // urgeFlag
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // widgetNumber
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // workflowId
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // yellowLightStart
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // delFlag
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // startDate
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // endDate
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // handleResult
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // handleResultDescription
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // handerId
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // caseCode
            cursor.getInt(offset + 48), // curNode
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // caseStatus
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // state
            cursor.getInt(offset + 51), // handleType
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // userId
            cursor.getInt(offset + 53), // processId
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // caseListStatus
            cursor.getInt(offset + 55), // caseType
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // roleId
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // district
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // firstWorkunit
            cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59), // secondWorkunit
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // cityWorkunit
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61), // redLightStartTime
            cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62), // yellowLightStartTime
            cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63), // queryFlag
            cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64) // fileListGson
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CaseInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setCurrPage(cursor.getInt(offset + 1));
        entity.setPageSize(cursor.getInt(offset + 2));
        entity.setCaseId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTime(cursor.getLong(offset + 4));
        entity.setCreateUser(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setModifyTime(cursor.getLong(offset + 6));
        entity.setModifyUser(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAcceptDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStreetId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCaseChildCategory(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCaseNumber(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCasePrimaryCategory(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCaseSecondaryCategory(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCaseAttribute(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCloseCaseDisposalEntity(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDescription(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDispatchUserId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setElement(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setEmergencyDegree(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setEndNode(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setGrade(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setKnottyType(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setLat(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setLightType(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setLng(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setGridId(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setManagePoint(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setPersonName(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setPersonTel(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setRedLightStart(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setCommunityId(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setSource(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setStatus(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setSubWorkflowDisposalEntity(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setTaskId(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setUrgeFlag(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setWidgetNumber(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setWorkflowId(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setYellowLightStart(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setDelFlag(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setStartDate(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setEndDate(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setHandleResult(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setHandleResultDescription(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setHanderId(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setCaseCode(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setCurNode(cursor.getInt(offset + 48));
        entity.setCaseStatus(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setState(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setHandleType(cursor.getInt(offset + 51));
        entity.setUserId(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setProcessId(cursor.getInt(offset + 53));
        entity.setCaseListStatus(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setCaseType(cursor.getInt(offset + 55));
        entity.setRoleId(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setDistrict(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setFirstWorkunit(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setSecondWorkunit(cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59));
        entity.setCityWorkunit(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setRedLightStartTime(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
        entity.setYellowLightStartTime(cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62));
        entity.setQueryFlag(cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63));
        entity.setFileListGson(cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CaseInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CaseInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CaseInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
