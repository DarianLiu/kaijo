package dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.geek.kaijo.mvp.model.entity.UploadCaseFile;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPLOAD_CASE_FILE".
*/
public class UploadCaseFileDao extends AbstractDao<UploadCaseFile, Integer> {

    public static final String TABLENAME = "UPLOAD_CASE_FILE";

    /**
     * Properties of entity UploadCaseFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CaseId = new Property(0, int.class, "caseId", true, "CASE_ID");
        public final static Property CaseProcessRecordId = new Property(1, int.class, "caseProcessRecordId", false, "CASE_PROCESS_RECORD_ID");
        public final static Property WhenType = new Property(2, int.class, "whenType", false, "WHEN_TYPE");
        public final static Property FileType = new Property(3, int.class, "fileType", false, "FILE_TYPE");
        public final static Property HandleType = new Property(4, int.class, "handleType", false, "HANDLE_TYPE");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property FileName = new Property(6, String.class, "fileName", false, "FILE_NAME");
        public final static Property IsSuccess = new Property(7, int.class, "isSuccess", false, "IS_SUCCESS");
    }


    public UploadCaseFileDao(DaoConfig config) {
        super(config);
    }
    
    public UploadCaseFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPLOAD_CASE_FILE\" (" + //
                "\"CASE_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: caseId
                "\"CASE_PROCESS_RECORD_ID\" INTEGER NOT NULL ," + // 1: caseProcessRecordId
                "\"WHEN_TYPE\" INTEGER NOT NULL ," + // 2: whenType
                "\"FILE_TYPE\" INTEGER NOT NULL ," + // 3: fileType
                "\"HANDLE_TYPE\" INTEGER NOT NULL ," + // 4: handleType
                "\"URL\" TEXT," + // 5: url
                "\"FILE_NAME\" TEXT," + // 6: fileName
                "\"IS_SUCCESS\" INTEGER NOT NULL );"); // 7: isSuccess
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPLOAD_CASE_FILE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UploadCaseFile entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCaseId());
        stmt.bindLong(2, entity.getCaseProcessRecordId());
        stmt.bindLong(3, entity.getWhenType());
        stmt.bindLong(4, entity.getFileType());
        stmt.bindLong(5, entity.getHandleType());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(7, fileName);
        }
        stmt.bindLong(8, entity.getIsSuccess());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UploadCaseFile entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCaseId());
        stmt.bindLong(2, entity.getCaseProcessRecordId());
        stmt.bindLong(3, entity.getWhenType());
        stmt.bindLong(4, entity.getFileType());
        stmt.bindLong(5, entity.getHandleType());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(7, fileName);
        }
        stmt.bindLong(8, entity.getIsSuccess());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public UploadCaseFile readEntity(Cursor cursor, int offset) {
        UploadCaseFile entity = new UploadCaseFile( //
            cursor.getInt(offset + 0), // caseId
            cursor.getInt(offset + 1), // caseProcessRecordId
            cursor.getInt(offset + 2), // whenType
            cursor.getInt(offset + 3), // fileType
            cursor.getInt(offset + 4), // handleType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fileName
            cursor.getInt(offset + 7) // isSuccess
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UploadCaseFile entity, int offset) {
        entity.setCaseId(cursor.getInt(offset + 0));
        entity.setCaseProcessRecordId(cursor.getInt(offset + 1));
        entity.setWhenType(cursor.getInt(offset + 2));
        entity.setFileType(cursor.getInt(offset + 3));
        entity.setHandleType(cursor.getInt(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFileName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsSuccess(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(UploadCaseFile entity, long rowId) {
        return entity.getCaseId();
    }
    
    @Override
    public Integer getKey(UploadCaseFile entity) {
        if(entity != null) {
            return entity.getCaseId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UploadCaseFile entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
