package dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.geek.kaijo.mvp.model.entity.IPRegisterBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IPREGISTER_BEAN".
*/
public class IPRegisterBeanDao extends AbstractDao<IPRegisterBean, Long> {

    public static final String TABLENAME = "IPREGISTER_BEAN";

    /**
     * Properties of entity IPRegisterBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Status = new Property(1, int.class, "Status", false, "STATUS");
        public final static Property ThingPositionId = new Property(2, long.class, "thingPositionId", true, "_id");
        public final static Property ThingId = new Property(3, int.class, "thingId", false, "THING_ID");
        public final static Property CreateUser = new Property(4, int.class, "createUser", false, "CREATE_USER");
        public final static Property Lat = new Property(5, double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(6, double.class, "lng", false, "LNG");
        public final static Property StreetId = new Property(7, int.class, "streetId", false, "STREET_ID");
        public final static Property CommunityId = new Property(8, int.class, "communityId", false, "COMMUNITY_ID");
        public final static Property GridId = new Property(9, int.class, "gridId", false, "GRID_ID");
        public final static Property ArriveTime = new Property(10, String.class, "arriveTime", false, "ARRIVE_TIME");
    }


    public IPRegisterBeanDao(DaoConfig config) {
        super(config);
    }
    
    public IPRegisterBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IPREGISTER_BEAN\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"STATUS\" INTEGER NOT NULL ," + // 1: Status
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 2: thingPositionId
                "\"THING_ID\" INTEGER NOT NULL ," + // 3: thingId
                "\"CREATE_USER\" INTEGER NOT NULL ," + // 4: createUser
                "\"LAT\" REAL NOT NULL ," + // 5: lat
                "\"LNG\" REAL NOT NULL ," + // 6: lng
                "\"STREET_ID\" INTEGER NOT NULL ," + // 7: streetId
                "\"COMMUNITY_ID\" INTEGER NOT NULL ," + // 8: communityId
                "\"GRID_ID\" INTEGER NOT NULL ," + // 9: gridId
                "\"ARRIVE_TIME\" TEXT);"); // 10: arriveTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IPREGISTER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IPRegisterBean entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindLong(2, entity.getStatus());
        stmt.bindLong(3, entity.getThingPositionId());
        stmt.bindLong(4, entity.getThingId());
        stmt.bindLong(5, entity.getCreateUser());
        stmt.bindDouble(6, entity.getLat());
        stmt.bindDouble(7, entity.getLng());
        stmt.bindLong(8, entity.getStreetId());
        stmt.bindLong(9, entity.getCommunityId());
        stmt.bindLong(10, entity.getGridId());
 
        String arriveTime = entity.getArriveTime();
        if (arriveTime != null) {
            stmt.bindString(11, arriveTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IPRegisterBean entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindLong(2, entity.getStatus());
        stmt.bindLong(3, entity.getThingPositionId());
        stmt.bindLong(4, entity.getThingId());
        stmt.bindLong(5, entity.getCreateUser());
        stmt.bindDouble(6, entity.getLat());
        stmt.bindDouble(7, entity.getLng());
        stmt.bindLong(8, entity.getStreetId());
        stmt.bindLong(9, entity.getCommunityId());
        stmt.bindLong(10, entity.getGridId());
 
        String arriveTime = entity.getArriveTime();
        if (arriveTime != null) {
            stmt.bindString(11, arriveTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 2);
    }    

    @Override
    public IPRegisterBean readEntity(Cursor cursor, int offset) {
        IPRegisterBean entity = new IPRegisterBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.getInt(offset + 1), // Status
            cursor.getLong(offset + 2), // thingPositionId
            cursor.getInt(offset + 3), // thingId
            cursor.getInt(offset + 4), // createUser
            cursor.getDouble(offset + 5), // lat
            cursor.getDouble(offset + 6), // lng
            cursor.getInt(offset + 7), // streetId
            cursor.getInt(offset + 8), // communityId
            cursor.getInt(offset + 9), // gridId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // arriveTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IPRegisterBean entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStatus(cursor.getInt(offset + 1));
        entity.setThingPositionId(cursor.getLong(offset + 2));
        entity.setThingId(cursor.getInt(offset + 3));
        entity.setCreateUser(cursor.getInt(offset + 4));
        entity.setLat(cursor.getDouble(offset + 5));
        entity.setLng(cursor.getDouble(offset + 6));
        entity.setStreetId(cursor.getInt(offset + 7));
        entity.setCommunityId(cursor.getInt(offset + 8));
        entity.setGridId(cursor.getInt(offset + 9));
        entity.setArriveTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IPRegisterBean entity, long rowId) {
        entity.setThingPositionId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IPRegisterBean entity) {
        if(entity != null) {
            return entity.getThingPositionId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IPRegisterBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
